@page "/viewinventory/{id}"
@using Microsoft.AspNetCore.SignalR.Client
@using SonicWarehouseManagement.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h2>Inventory</h2>
<hr />
<p>Item number: <b>@inv.Item_Code</b></p>
<p>Transaction Type: <b>@inv.Ref_Type</b></p>
<table class="table">
    <thead>
        <tr>
            <th>Document Reference</th>
            <th>Quantity</th>
            <th>Transaction Type</th>
            <th>Uom</th>
        </tr>
    </thead>
    <tbody>
        @if(invd == null)
        {
            // do nothing
        }
        else
        {
            @foreach(var item in invd)
            {
                <tr>
                    <td style="font-size: small;">@item.Header_Ref</td>
                    <td style="font-size: small;">@item.Quantity</td>
                    <td style="font-size: small;">@item.Transaction_Type</td>   
                    <td style="font-size: small;">@item.Uom</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    InventoryHeader inv = new InventoryHeader();
    InventoryDetails[] invd;

    private HubConnection hubCon;

    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        inv = await Http.GetJsonAsync<InventoryHeader>("api/InventoryHeadersIndex/" + id);
        invd = await Http.GetJsonAsync<InventoryDetails[]>("api/InventoryDetailsIndex/" + id);

        hubCon = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/InventoryHub"))
            .Build();

        await hubCon.StartAsync();
    }

    public bool IsConnected =>
        hubCon.State == HubConnectionState.Connected;

    Task SendMessage() => hubCon.SendAsync("SendMessage");

    public void Dispose()
    {
        _ = hubCon.DisposeAsync();
    }
}
